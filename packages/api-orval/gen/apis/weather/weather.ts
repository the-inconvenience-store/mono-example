/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mono API
 * API for managing blog posts with MDX content parsing & retrieving the weather forecast
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ProblemDetails,
  WeatherForecast
} from '../../models';

import { customFetch } from '../../../src/custom-fetch';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Returns an array of weather forecasts for the next 5 days starting from tomorrow.
Each forecast includes date, temperature in Celsius and Fahrenheit, and a weather summary.

Sample response:
```json
[
  {
    "date": "2024-01-16",
    "temperatureC": 15,
    "temperatureF": 59,
    "summary": "Mild"
  }
]
```
 * @summary Gets a 5-day weather forecast with random temperature data
 */
export type getWeatherForecastResponse200 = {
  data: WeatherForecast[]
  status: 200
}

export type getWeatherForecastResponse500 = {
  data: ProblemDetails
  status: 500
}
    
export type getWeatherForecastResponseComposite = getWeatherForecastResponse200 | getWeatherForecastResponse500;
    
export type getWeatherForecastResponse = getWeatherForecastResponseComposite & {
  headers: Headers;
}

export const getGetWeatherForecastUrl = () => {


  

  return `/WeatherForecast`
}

export const getWeatherForecast = async ( options?: RequestInit): Promise<getWeatherForecastResponse> => {
  
  return customFetch<getWeatherForecastResponse>(getGetWeatherForecastUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
    }

    
export const getGetWeatherForecastQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) => getWeatherForecast({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>
export type GetWeatherForecastQueryError = ProblemDetails


/**
 * @summary Gets a 5-day weather forecast with random temperature data
 */

export function useGetWeatherForecast<TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWeatherForecastQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



