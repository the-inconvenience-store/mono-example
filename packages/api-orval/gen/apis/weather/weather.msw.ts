/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Mono API
 * API for managing blog posts with MDX content parsing & retrieving the weather forecast
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { WeatherForecast } from '../../models'

export const getGetWeatherForecastResponseMock = (): WeatherForecast[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date: faker.date.past().toISOString().split('T')[0],
    temperatureC: faker.number.int({ min: -20, max: 55 }),
    temperatureF: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    summary: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  }))

export const getGetWeatherForecastMockHandler = (
  overrideResponse?:
    | WeatherForecast[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<WeatherForecast[]> | WeatherForecast[]),
) => {
  return http.get('*/WeatherForecast', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetWeatherForecastResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getWeatherMock = () => [getGetWeatherForecastMockHandler()]
