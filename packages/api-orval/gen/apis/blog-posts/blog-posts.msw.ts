/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Mono API
 * API for managing blog posts with MDX content parsing & retrieving the weather forecast
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  BlogPost
} from '../../models';


export const getGetAllBlogPostsResponseMock = (): BlogPost[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({metadata: {title: faker.string.alpha({length: {min: 1, max: 200}}), publishedAt: faker.helpers.fromRegExp('^\d{4}-\d{2}-\d{2}$'), summary: faker.string.alpha({length: {min: 10, max: 500}}), image: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 0, max: 500}}), null]), undefined])}, slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), content: faker.string.alpha({length: {min: 1, max: 20}})})))

export const getGetBlogPostBySlugResponseMock = (overrideResponse: Partial< BlogPost > = {}): BlogPost => ({metadata: {title: faker.string.alpha({length: {min: 1, max: 200}}), publishedAt: faker.helpers.fromRegExp('^\d{4}-\d{2}-\d{2}$'), summary: faker.string.alpha({length: {min: 10, max: 500}}), image: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 0, max: 500}}), null]), undefined])}, slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), content: faker.string.alpha({length: {min: 1, max: 20}}), ...overrideResponse})


export const getGetAllBlogPostsMockHandler = (overrideResponse?: BlogPost[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPost[]> | BlogPost[])) => {
  return http.get('*/BlogPosts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllBlogPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBlogPostBySlugMockHandler = (overrideResponse?: BlogPost | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlogPost> | BlogPost)) => {
  return http.get('*/BlogPosts/:slug', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetBlogPostBySlugResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getBlogPostsMock = () => [
  getGetAllBlogPostsMockHandler(),
  getGetBlogPostBySlugMockHandler()
]
