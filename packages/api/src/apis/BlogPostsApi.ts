/* tslint:disable */
/* eslint-disable */
/**
 * Blog API
 * API for managing blog posts with MDX content parsing
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogPost,
  ProblemDetails,
} from '../models/index';
import {
    BlogPostFromJSON,
    BlogPostToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetBlogPostBySlugRequest {
    slug: string;
}

/**
 * BlogPostsApi - interface
 * 
 * @export
 * @interface BlogPostsApiInterface
 */
export interface BlogPostsApiInterface {
    /**
     * Retrieves a complete list of all available blog posts including their metadata and full content.  Posts are returned with their original publication order and include:  - Metadata (title, publication date, summary, optional image)  - URL-friendly slug  - Full MDX content    Sample response:  ```json  [    {      \"metadata\": {        \"title\": \"Getting Started with React\",        \"publishedAt\": \"2024-01-15\",        \"summary\": \"Learn the basics of React development\",        \"image\": \"react-intro.jpg\"      },      \"slug\": \"getting-started-with-react\",      \"content\": \"# Getting Started with React\\n\\nReact is a...\"    }  ]  ```
     * @summary Gets all blog posts with their metadata and content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostsApiInterface
     */
    getAllBlogPostsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPost>>>;

    /**
     * Retrieves a complete list of all available blog posts including their metadata and full content.  Posts are returned with their original publication order and include:  - Metadata (title, publication date, summary, optional image)  - URL-friendly slug  - Full MDX content    Sample response:  ```json  [    {      \"metadata\": {        \"title\": \"Getting Started with React\",        \"publishedAt\": \"2024-01-15\",        \"summary\": \"Learn the basics of React development\",        \"image\": \"react-intro.jpg\"      },      \"slug\": \"getting-started-with-react\",      \"content\": \"# Getting Started with React\\n\\nReact is a...\"    }  ]  ```
     * Gets all blog posts with their metadata and content
     */
    getAllBlogPosts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPost>>;

    /**
     * Retrieves a single blog post using its URL-friendly slug identifier.  The slug is derived from the original filename and is used for SEO-friendly URLs.    Example slugs:  - \"getting-started-with-react\"  - \"advanced-typescript-patterns\"  - \"nextjs-best-practices\"    Sample response:  ```json  {    \"metadata\": {      \"title\": \"Getting Started with React\",      \"publishedAt\": \"2024-01-15\",      \"summary\": \"Learn the basics of React development\",      \"image\": \"react-intro.jpg\"    },    \"slug\": \"getting-started-with-react\",    \"content\": \"# Getting Started with React\\n\\nReact is a...\"  }  ```
     * @summary Gets a specific blog post by its URL slug
     * @param {string} slug The URL-friendly slug identifier for the blog post (e.g., \&quot;getting-started-with-react\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostsApiInterface
     */
    getBlogPostBySlugRaw(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogPost>>;

    /**
     * Retrieves a single blog post using its URL-friendly slug identifier.  The slug is derived from the original filename and is used for SEO-friendly URLs.    Example slugs:  - \"getting-started-with-react\"  - \"advanced-typescript-patterns\"  - \"nextjs-best-practices\"    Sample response:  ```json  {    \"metadata\": {      \"title\": \"Getting Started with React\",      \"publishedAt\": \"2024-01-15\",      \"summary\": \"Learn the basics of React development\",      \"image\": \"react-intro.jpg\"    },    \"slug\": \"getting-started-with-react\",    \"content\": \"# Getting Started with React\\n\\nReact is a...\"  }  ```
     * Gets a specific blog post by its URL slug
     */
    getBlogPostBySlug(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogPost>;

}

/**
 * 
 */
export class BlogPostsApi extends runtime.BaseAPI implements BlogPostsApiInterface {

    /**
     * Retrieves a complete list of all available blog posts including their metadata and full content.  Posts are returned with their original publication order and include:  - Metadata (title, publication date, summary, optional image)  - URL-friendly slug  - Full MDX content    Sample response:  ```json  [    {      \"metadata\": {        \"title\": \"Getting Started with React\",        \"publishedAt\": \"2024-01-15\",        \"summary\": \"Learn the basics of React development\",        \"image\": \"react-intro.jpg\"      },      \"slug\": \"getting-started-with-react\",      \"content\": \"# Getting Started with React\\n\\nReact is a...\"    }  ]  ```
     * Gets all blog posts with their metadata and content
     */
    async getAllBlogPostsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/BlogPosts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogPostFromJSON));
    }

    /**
     * Retrieves a complete list of all available blog posts including their metadata and full content.  Posts are returned with their original publication order and include:  - Metadata (title, publication date, summary, optional image)  - URL-friendly slug  - Full MDX content    Sample response:  ```json  [    {      \"metadata\": {        \"title\": \"Getting Started with React\",        \"publishedAt\": \"2024-01-15\",        \"summary\": \"Learn the basics of React development\",        \"image\": \"react-intro.jpg\"      },      \"slug\": \"getting-started-with-react\",      \"content\": \"# Getting Started with React\\n\\nReact is a...\"    }  ]  ```
     * Gets all blog posts with their metadata and content
     */
    async getAllBlogPosts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPost>> {
        const response = await this.getAllBlogPostsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single blog post using its URL-friendly slug identifier.  The slug is derived from the original filename and is used for SEO-friendly URLs.    Example slugs:  - \"getting-started-with-react\"  - \"advanced-typescript-patterns\"  - \"nextjs-best-practices\"    Sample response:  ```json  {    \"metadata\": {      \"title\": \"Getting Started with React\",      \"publishedAt\": \"2024-01-15\",      \"summary\": \"Learn the basics of React development\",      \"image\": \"react-intro.jpg\"    },    \"slug\": \"getting-started-with-react\",    \"content\": \"# Getting Started with React\\n\\nReact is a...\"  }  ```
     * Gets a specific blog post by its URL slug
     */
    async getBlogPostBySlugRaw(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogPost>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getBlogPostBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/BlogPosts/{slug}`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogPostFromJSON(jsonValue));
    }

    /**
     * Retrieves a single blog post using its URL-friendly slug identifier.  The slug is derived from the original filename and is used for SEO-friendly URLs.    Example slugs:  - \"getting-started-with-react\"  - \"advanced-typescript-patterns\"  - \"nextjs-best-practices\"    Sample response:  ```json  {    \"metadata\": {      \"title\": \"Getting Started with React\",      \"publishedAt\": \"2024-01-15\",      \"summary\": \"Learn the basics of React development\",      \"image\": \"react-intro.jpg\"    },    \"slug\": \"getting-started-with-react\",    \"content\": \"# Getting Started with React\\n\\nReact is a...\"  }  ```
     * Gets a specific blog post by its URL slug
     */
    async getBlogPostBySlug(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogPost> {
        const response = await this.getBlogPostBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
