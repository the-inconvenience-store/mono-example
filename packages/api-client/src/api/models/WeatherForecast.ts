/* tslint:disable */
/* eslint-disable */
/**
 * Blog API
 * API for managing blog posts with MDX content parsing
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a weather forecast for a specific date
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * The date for this weather forecast
     * @type {Date}
     * @memberof WeatherForecast
     */
    date: Date;
    /**
     * Temperature in Celsius
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureC: number;
    /**
     * Temperature in Fahrenheit (automatically calculated from Celsius)
     * @type {number}
     * @memberof WeatherForecast
     */
    readonly temperatureF?: number;
    /**
     * Brief description of the weather conditions
     * @type {string}
     * @memberof WeatherForecast
     */
    summary?: string | null;
}

/**
 * Check if a given object implements the WeatherForecast interface.
 */
export function instanceOfWeatherForecast(value: object): value is WeatherForecast {
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('temperatureC' in value) || value['temperatureC'] === undefined) return false;
    return true;
}

export function WeatherForecastFromJSON(json: any): WeatherForecast {
    return WeatherForecastFromJSONTyped(json, false);
}

export function WeatherForecastFromJSONTyped(json: any, ignoreDiscriminator: boolean): WeatherForecast {
    if (json == null) {
        return json;
    }
    return {
        
        'date': (new Date(json['date'])),
        'temperatureC': json['temperatureC'],
        'temperatureF': json['temperatureF'] == null ? undefined : json['temperatureF'],
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function WeatherForecastToJSON(json: any): WeatherForecast {
    return WeatherForecastToJSONTyped(json, false);
}

export function WeatherForecastToJSONTyped(value?: Omit<WeatherForecast, 'temperatureF'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'date': ((value['date']).toISOString().substring(0,10)),
        'temperatureC': value['temperatureC'],
        'summary': value['summary'],
    };
}

