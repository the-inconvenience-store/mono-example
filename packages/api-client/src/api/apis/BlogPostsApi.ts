/* tslint:disable */
/* eslint-disable */
/**
 * Blog API
 * API for managing blog posts with MDX content parsing
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogPost,
  ProblemDetails,
} from '../models/index';
import {
    BlogPostFromJSON,
    BlogPostToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetBlogPostBySlugRequest {
    slug: string;
}

/**
 * 
 */
export class BlogPostsApi extends runtime.BaseAPI {

    /**
     * Retrieves all available blog posts with their metadata and full content from MDX files
     * Get all blog posts
     */
    async getAllBlogPostsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/BlogPosts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogPostFromJSON));
    }

    /**
     * Retrieves all available blog posts with their metadata and full content from MDX files
     * Get all blog posts
     */
    async getAllBlogPosts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPost>> {
        const response = await this.getAllBlogPostsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific blog post using its URL-friendly slug identifier
     * Get blog post by slug
     */
    async getBlogPostBySlugRaw(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogPost>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getBlogPostBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/BlogPosts/{slug}`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogPostFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific blog post using its URL-friendly slug identifier
     * Get blog post by slug
     */
    async getBlogPostBySlug(requestParameters: GetBlogPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogPost> {
        const response = await this.getBlogPostBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
